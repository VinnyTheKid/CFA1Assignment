#ifndef NGLSCENE_H__
#define NGLSCENE_H__
#include "OpenGLWindow.h"
#include "Ball.h"
//#include "Bat.h"
//#include "Box.h"
//#include "Goal.h"
//#include "Menu.h"
//#include "Game.h"

#include <ngl/Camera.h>
#include <ngl/Colour.h>
#include <ngl/Light.h>
//#include <ngl/Text.h>
#include <QSet>
//----------------------------------------------------------------------------------------------------------------------
/// @file NGLScene.h
/// @brief this class inherits from the Qt OpenGLWindow and allows us to use NGL to draw OpenGL
/// @author Jonathan Macey
/// @version 1.0
/// @date 10/9/13
/// Revision History :
/// This is an initial version used for the new NGL6 / Qt 5 demos
/// @class NGLScene
/// @brief our main glwindow widget for NGL applications all drawing elements are
/// put in this file
//----------------------------------------------------------------------------------------------------------------------
const static float s_batUpdate=0.2f;
const static ngl::Real s_batPushDistance = 0.5;

//----------------------------------------------------------------------------------------------------------------------
/// @brief the increment for x/y translation with mouse movement
//----------------------------------------------------------------------------------------------------------------------
const static float INCREMENT=0.01;

class NGLScene : public OpenGLWindow
{
  public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor for our NGL drawing class
    /// @param [in] parent the parent window to the class
    //----------------------------------------------------------------------------------------------------------------------
    NGLScene(QWindow *_parent=0);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief dtor must close down ngl and release OpenGL resources
    //----------------------------------------------------------------------------------------------------------------------
    ~NGLScene();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the initialize class is called once when the window is created and we have a valid GL context
    /// use this to setup any default GL stuff
    //----------------------------------------------------------------------------------------------------------------------
    void initialize();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this is called everytime we want to draw the scene
    //----------------------------------------------------------------------------------------------------------------------
    void render();

private:

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to indicate if the Left mouse button is pressed
    //----------------------------------------------------------------------------------------------------------------------
    //bool m_batPush;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous x mouse value
    //----------------------------------------------------------------------------------------------------------------------
    //int m_origX;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous y mouse value
    //----------------------------------------------------------------------------------------------------------------------
    //int m_origY;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous x mouse value for Position changes
    //----------------------------------------------------------------------------------------------------------------------
    //int m_origXPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous y mouse value for Position changes
    //----------------------------------------------------------------------------------------------------------------------
    //int m_origYPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Our Camera
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Camera *m_cam;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the model position for mouse movement
    //----------------------------------------------------------------------------------------------------------------------
    //ngl::Vec3 m_batPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a simple light use to illuminate the screen
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Light *m_light;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method to load transform matrices to the shader
    //----------------------------------------------------------------------------------------------------------------------
    int m_redrawTimer;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief we will draw with a different timer to the update
    //----------------------------------------------------------------------------------------------------------------------
    //int m_batUpdateTimer;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the timer used to update our bat attributes
    //----------------------------------------------------------------------------------------------------------------------
    int m_ballUpdateTimer;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the timer used to update our ball attributes
    //----------------------------------------------------------------------------------------------------------------------
    QSet<Qt::Key> m_keysPressed;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the pressed keys
    //----------------------------------------------------------------------------------------------------------------------
    Ball *m_ball;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a pointer to an instance of the Ball class
    //----------------------------------------------------------------------------------------------------------------------
    //Bat *m_bat;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a pointer to an instance of the Bat class
    //----------------------------------------------------------------------------------------------------------------------
    //Box *m_box;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a pointer to an instance of the Box class
    //----------------------------------------------------------------------------------------------------------------------
    //Goal *m_goal;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a pointer to an instance of the Goal class
    //----------------------------------------------------------------------------------------------------------------------
    //Game *m_dink;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a pointer to an instance of the Game class
    //----------------------------------------------------------------------------------------------------------------------
    //Menu *m_menu;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a pointer to an instance of the Menu class
    /// //----------------------------------------------------------------------------------------------------------------------
    //ngl::Text *m_title;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a pointer to an instance of the Menu class
    /// //----------------------------------------------------------------------------------------------------------------------
    //ngl::Text *m_text;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a pointer to an instance of the Menu class
    //----------------------------------------------------------------------------------------------------------------------
    void loadMatricesToShader();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Qt Event called when the window is re-sized
    /// @param [in] _event the Qt event to query for size etc
    //----------------------------------------------------------------------------------------------------------------------
    void resizeEvent(QResizeEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Qt Event called when a key is pressed
    /// @param [in] _event the Qt event to query for size etc
    //----------------------------------------------------------------------------------------------------------------------
    void keyPressEvent(QKeyEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called every time a mouse is moved
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mouseMoveEvent (QMouseEvent * _event );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse button is pressed
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mousePressEvent ( QMouseEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse button is released
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void NGLScene::timerEvent( QTimerEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime a timer event occurs is moved
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    //void drawScene(   const Game::GameState _gameState, const std::string &_shader);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called to draw the entire current scene depending on gameState
    /// @param _shader the shader used to draw
    /// //----------------------------------------------------------------------------------------------------------------------
    //void setupGameState(   const Game::GameState _gameState);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called to draw the entire current scene depending on gameState
    /// @param _shader the shader used to draw
    //----------------------------------------------------------------------------------------------------------------------
   // void updateBat();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method updates the attributes of the bat: the position based on mouse movement and
    /// the orientation based on the balls position
    //----------------------------------------------------------------------------------------------------------------------
    void updateBall();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method updates the ball position based on its velcity and the changes
    /// in velocity due to a collisions
    //----------------------------------------------------------------------------------------------------------------------
    //void wallCollision();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method detects collisions with the walls of the box and performs the
    /// appropriate action depending on where the collision occurs
    //----------------------------------------------------------------------------------------------------------------------
    //void batCollision();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method detects a collision between the ball and bat and alters the
    /// ball's velocity based on the bat's normal
    //----------------------------------------------------------------------------------------------------------------------
    //void goalCollision();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method detects whether the ball has collided with a goal, and if so
    /// increases the score and tells both ball and goal to generate new attributes
    //----------------------------------------------------------------------------------------------------------------------
    //void gameOver();
};




#endif
