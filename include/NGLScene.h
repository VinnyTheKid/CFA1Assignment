#ifndef NGLSCENE_H__
#define NGLSCENE_H__
#include "OpenGLWindow.h"
#include "Ball.h"
#include "Bat.h"
#include "Box.h"
#include "Goal.h"
#include <ngl/Camera.h>
#include <ngl/Colour.h>
#include <ngl/Light.h>
#include <ngl/Text.h>
#include <QSet>
//----------------------------------------------------------------------------------------------------------------------
/// @file NGLScene.h
/// @brief this class inherits from the Qt OpenGLWindow and allows us to use NGL to draw OpenGL
/// @author Jonathan Macey
/// @version 1.0
/// @date 10/9/13
/// Revision History :
/// This is an initial version used for the new NGL6 / Qt 5 demos
/// @class NGLScene
/// @brief our main glwindow widget for NGL applications all drawing elements are
/// put in this file


//----------------------------------------------------------------------------------------------------------------------
/// @brief the distance seperating the bat from the extents of the box
//----------------------------------------------------------------------------------------------------------------------
const static ngl::Real s_batGap = 10, s_gravity = 0.02;
//----------------------------------------------------------------------------------------------------------------------
/// @brief the increment for x/y translation with mouse movement
//----------------------------------------------------------------------------------------------------------------------
const static float s_INCREMENT = 0.03;

class NGLScene : public OpenGLWindow
{
public:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief ctor for our NGL drawing class
  /// @param [in] parent the parent window to the class
  //----------------------------------------------------------------------------------------------------------------------
  NGLScene(QWindow *_parent=0);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief dtor must close down ngl and release OpenGL resources
  //----------------------------------------------------------------------------------------------------------------------
  ~NGLScene();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the initialize class is called once when the window is created and we have a valid GL context
  /// use this to setup any default GL stuff
  //----------------------------------------------------------------------------------------------------------------------
  void initialize();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this is called everytime we want to draw the scene
  //---------------------------------------------------------------------------------------------------------------------
  void render();

private:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief int contatining the current score
  //----------------------------------------------------------------------------------------------------------------------
  int m_currentScore;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief flag to indicate if the bat is able to be moved by the mouse input
  //----------------------------------------------------------------------------------------------------------------------
  bool m_batMove;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief flag to indicate if the bat is in the process of performing a push
  //----------------------------------------------------------------------------------------------------------------------
  bool m_batPush;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Our Camera
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Camera *m_cam;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the model position for mouse movement
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 m_batPos;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a simple light use to illuminate the screen
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Light *m_light;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a timer for redrawing the scene and updating the ball and bat attributes
  //----------------------------------------------------------------------------------------------------------------------
  int m_redrawTimer;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a pointer to an instance of the Ball class
  //----------------------------------------------------------------------------------------------------------------------
  Ball *m_ball;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a pointer to an instance of the Bat class
  //----------------------------------------------------------------------------------------------------------------------
  Bat *m_bat;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a pointer to an instance of the Box class
  //----------------------------------------------------------------------------------------------------------------------
  Box *m_box;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a pointer to an instance of the Goal class
  //----------------------------------------------------------------------------------------------------------------------
  Goal *m_goal;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a pointer to an instance of the Text class
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Text *m_text;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief loads the matrices to the shader
  //----------------------------------------------------------------------------------------------------------------------
  void loadMatricesToShader();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Qt Event called when the window is re-sized
  /// @param [in] _event the Qt event to query for size etc
  //----------------------------------------------------------------------------------------------------------------------
  void resizeEvent(QResizeEvent *_event);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Qt Event called when the mouse is moved
  /// @param [in] _event the Qt event to query for size etc
  //----------------------------------------------------------------------------------------------------------------------
  void mouseMoveEvent (QMouseEvent * _event );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this method is called everytime the mouse button is pressed
  /// inherited from QObject and overridden here.
  /// @param _event the Qt Event structure
  //----------------------------------------------------------------------------------------------------------------------
  void mousePressEvent ( QMouseEvent *_event);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this method is called everytime the timer is triggered
  /// inherited from QObject and overridden here.
  /// @param _event the Qt Event structure
  //----------------------------------------------------------------------------------------------------------------------
  void NGLScene::timerEvent( QTimerEvent *_event);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this method is called to update the attributes of the bat instance
  /// @param _event the Qt Event structure
  //----------------------------------------------------------------------------------------------------------------------
  void updateBat();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this method updates the ball position based on its velcity and the changes
  /// in velocity due to a collisions
  //----------------------------------------------------------------------------------------------------------------------
  void updateBall();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this method detects collisions with the walls of the box and performs the
  /// appropriate action depending on where the collision occurs
  //----------------------------------------------------------------------------------------------------------------------
  void wallCollision();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this method detects a collision between the ball and bat and alters the
  /// ball's velocity based on the bat's normal
  //----------------------------------------------------------------------------------------------------------------------
  void batCollision();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this method detects whether the ball has collided with a goal, and if so
  /// increases the score and tells both ball and goal to generate new attributes
  //----------------------------------------------------------------------------------------------------------------------
  void goalCollision();
};


#endif
